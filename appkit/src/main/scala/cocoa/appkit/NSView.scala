package cocoa.appkit

import scalanative.native._
import cocoa.foundation.{BOOL, NSArray, NSCoder, NSComparisonResult, NSData, NSInteger, NSObjectClass, NSPoint, NSRect, NSSize, NSString}
import objc.runtime.id

import scala.language.experimental.macros


@ObjC
class NSView extends NSResponder { //with NSAnimatablePropertyContainer with NSUserInterfaceItemIdentification with NSDraggingDestination with NSAppearanceCustomization with NSAccessibilityElement with NSAccessibility {
  @inline def initWithFrame(frameRect: NSRect): NSView = extern
//  @inline def initWithCoder(coder: NSCoder): NSView = extern
  @inline def isDescendantOf(aView: NSView): BOOL = extern
  @inline def ancestorSharedWithView(aView: NSView): NSView = extern
  @inline def getRectsBeingDrawn(rects: NSRect, count: NSInteger): Unit = extern
  @inline def needsToDrawRect(aRect: NSRect): BOOL = extern
  @inline def viewDidHide(): Unit = extern
  @inline def viewDidUnhide(): Unit = extern
  @inline def addSubview(aView: NSView): Unit = extern
//  @inline def addSubview(aView: NSView, place: NSWindowOrderingMode, otherView: NSView): Unit = extern
  @inline def sortSubviewsUsingFunction(compare: NSComparisonResult, context: Ptr[Byte]): Unit = extern
  @inline def viewWillMoveToWindow(newWindow: NSWindow): Unit = extern
  @inline def viewDidMoveToWindow(): Unit = extern
  @inline def viewWillMoveToSuperview(newSuperview: NSView): Unit = extern
  @inline def viewDidMoveToSuperview(): Unit = extern
  @inline def didAddSubview(subview: NSView): Unit = extern
  @inline def willRemoveSubview(subview: NSView): Unit = extern
  @inline def removeFromSuperview(): Unit = extern
  @inline def replaceSubview(oldView: NSView, newView: NSView): Unit = extern
  @inline def removeFromSuperviewWithoutNeedingDisplay(): Unit = extern
  @inline def viewDidChangeBackingProperties(): Unit = extern
  @inline def resizeSubviewsWithOldSize(oldSize: NSSize): Unit = extern
  @inline def resizeWithOldSuperviewSize(oldSize: NSSize): Unit = extern
  @inline def setFrameOrigin(newOrigin: NSPoint): Unit = extern
  @inline def setFrameSize(newSize: NSSize): Unit = extern
  @inline def setBoundsOrigin(newOrigin: NSPoint): Unit = extern
  @inline def setBoundsSize(newSize: NSSize): Unit = extern
  @inline def translateOriginToPoint(translation: NSPoint): Unit = extern
  @inline def scaleUnitSquareToSize(newUnitSize: NSSize): Unit = extern
//  @inline def rotateByAngle(angle: CGFloat): Unit = extern
//  @inline def convertPoint(aPoint: NSPoint, aView: NSView): NSPoint = extern
//  @inline def convertPoint(aPoint: NSPoint, aView: NSView): NSPoint = extern
//  @inline def convertSize(aSize: NSSize, aView: NSView): NSSize = extern
//  @inline def convertSize(aSize: NSSize, aView: NSView): NSSize = extern
//  @inline def convertRect(aRect: NSRect, aView: NSView): NSRect = extern
//  @inline def convertRect(aRect: NSRect, aView: NSView): NSRect = extern
//  @inline def backingAlignedRect(aRect: NSRect, options: NSAlignmentOptions): NSRect = extern
  @inline def centerScanRect(aRect: NSRect): NSRect = extern
  @inline def convertPointToBacking(aPoint: NSPoint): NSPoint = extern
  @inline def convertPointFromBacking(aPoint: NSPoint): NSPoint = extern
  @inline def convertSizeToBacking(aSize: NSSize): NSSize = extern
  @inline def convertSizeFromBacking(aSize: NSSize): NSSize = extern
  @inline def convertRectToBacking(aRect: NSRect): NSRect = extern
  @inline def convertRectFromBacking(aRect: NSRect): NSRect = extern
  @inline def convertPointToLayer(aPoint: NSPoint): NSPoint = extern
  @inline def convertPointFromLayer(aPoint: NSPoint): NSPoint = extern
  @inline def convertSizeToLayer(aSize: NSSize): NSSize = extern
  @inline def convertSizeFromLayer(aSize: NSSize): NSSize = extern
  @inline def convertRectToLayer(aRect: NSRect): NSRect = extern
  @inline def convertRectFromLayer(aRect: NSRect): NSRect = extern
  @inline def setNeedsDisplayInRect(invalidRect: NSRect): Unit = extern
  @inline def lockFocus(): Unit = extern
  @inline def unlockFocus(): Unit = extern
  @inline def lockFocusIfCanDraw(): BOOL = extern
//  @inline def lockFocusIfCanDrawInContext(context: NSGraphicsContext): BOOL = extern
  @inline def display(): Unit = extern
  @inline def displayIfNeeded(): Unit = extern
  @inline def displayIfNeededIgnoringOpacity(): Unit = extern
  @inline def displayRect(rect: NSRect): Unit = extern
  @inline def displayIfNeededInRect(rect: NSRect): Unit = extern
  @inline def displayRectIgnoringOpacity(rect: NSRect): Unit = extern
  @inline def displayIfNeededInRectIgnoringOpacity(rect: NSRect): Unit = extern
  @inline def drawRect(dirtyRect: NSRect): Unit = extern
//  @inline def displayRectIgnoringOpacity(aRect: NSRect, context: NSGraphicsContext): Unit = extern
//  @inline def bitmapImageRepForCachingDisplayInRect(rect: NSRect): NSBitmapImageRep = extern
//  @inline def cacheDisplayInRect(rect: NSRect, bitmapImageRep: NSBitmapImageRep): Unit = extern
  @inline def viewWillDraw(): Unit = extern
  @inline def scrollPoint(aPoint: NSPoint): Unit = extern
  @inline def scrollRectToVisible(aRect: NSRect): BOOL = extern
  @inline def autoscroll(theEvent: NSEvent): BOOL = extern
  @inline def adjustScroll(newVisible: NSRect): NSRect = extern
  @inline def scrollRect(aRect: NSRect, delta: NSSize): Unit = extern
  @inline def translateRectsNeedingDisplayInRect(clipRect: NSRect, delta: NSSize): Unit = extern
  @inline def hitTest(aPoint: NSPoint): NSView = extern
  @inline def mouse(aPoint: NSPoint, aRect: NSRect): BOOL = extern
  @inline def viewWithTag(aTag: NSInteger): NSView = extern
//  @inline def performKeyEquivalent(theEvent: NSEvent): BOOL = extern
  @inline def acceptsFirstMouse(theEvent: NSEvent): BOOL = extern
  @inline def shouldDelayWindowOrderingForEvent(theEvent: NSEvent): BOOL = extern
//  @inline def addCursorRect(aRect: NSRect, anObj: NSCursor): Unit = extern
//  @inline def removeCursorRect(aRect: NSRect, anObj: NSCursor): Unit = extern
  @inline def discardCursorRects(): Unit = extern
  @inline def resetCursorRects(): Unit = extern
//  @inline def addTrackingRect(aRect: NSRect, anObject: id, data: Ptr[Byte], flag: BOOL): NSTrackingRectTag = extern
//  @inline def removeTrackingRect(tag: NSTrackingRectTag): Unit = extern
//  @inline def makeBackingLayer(): CALayer = extern
  @inline def updateLayer(): Unit = extern
//  @inline def addTrackingArea(trackingArea: NSTrackingArea): Unit = extern
//  @inline def removeTrackingArea(trackingArea: NSTrackingArea): Unit = extern
  @inline def updateTrackingAreas(): Unit = extern
//  @inline def menuForEvent(event: NSEvent): NSMenu = extern
//  @inline def willOpenMenu(menu: NSMenu, event: NSEvent): Unit = extern
//  @inline def didCloseMenu(menu: NSMenu, event: NSEvent): Unit = extern
//  @inline def addToolTipRect(aRect: NSRect, anObject: id, data: Ptr[Byte]): NSToolTipTag = extern
//  @inline def removeToolTip(tag: NSToolTipTag): Unit = extern
  @inline def removeAllToolTips(): Unit = extern
  @inline def viewWillStartLiveResize(): Unit = extern
  @inline def viewDidEndLiveResize(): Unit = extern
  @inline def getRectsExposedDuringLiveResize(exposedRects: NSRect, count: NSInteger): Unit = extern
  @inline def rectForSmartMagnificationAtPoint(location: NSPoint, visibleRect: NSRect): NSRect = extern
  @inline def prepareForReuse(): Unit = extern
  @inline def prepareContentInRect(rect: NSRect): Unit = extern
  @inline def window(): NSWindow = extern
  @inline def superview(): NSView = extern
  @inline def subviews(): NSArray[NSView] = extern
  @inline def setSubviews(subviews: NSArray[NSView]): Unit = extern
  @inline def opaqueAncestor(): NSView = extern
  @inline def isHidden(): BOOL = extern
  @inline def setHidden(hidden: BOOL): Unit = extern
  @inline def isHiddenOrHasHiddenAncestor(): BOOL = extern
  @inline def wantsDefaultClipping(): BOOL = extern
  @inline def postsFrameChangedNotifications(): BOOL = extern
  @inline def setPostsFrameChangedNotifications(postsFrameChangedNotifications: BOOL): Unit = extern
  @inline def autoresizesSubviews(): BOOL = extern
  @inline def setAutoresizesSubviews(autoresizesSubviews: BOOL): Unit = extern
//  @inline def autoresizingMask(): NSAutoresizingMaskOptions = extern
//  @inline def setAutoresizingMask(autoresizingMask: NSAutoresizingMaskOptions): Unit = extern
  @inline def frame(): NSRect = extern
  @inline def setFrame(frame: NSRect): Unit = extern
//  @inline def frameRotation(): CGFloat = extern
//  @inline def setFrameRotation(frameRotation: CGFloat): Unit = extern
//  @inline def frameCenterRotation(): CGFloat = extern
//  @inline def setFrameCenterRotation(frameCenterRotation: CGFloat): Unit = extern
//  @inline def boundsRotation(): CGFloat = extern
//  @inline def setBoundsRotation(boundsRotation: CGFloat): Unit = extern
  @inline def bounds(): NSRect = extern
  @inline def setBounds(bounds: NSRect): Unit = extern
  @inline def isFlipped(): BOOL = extern
  @inline def isRotatedFromBase(): BOOL = extern
  @inline def isRotatedOrScaledFromBase(): BOOL = extern
  @inline def isOpaque(): BOOL = extern
  @inline def canDrawConcurrently(): BOOL = extern
  @inline def setCanDrawConcurrently(canDrawConcurrently: BOOL): Unit = extern
  @inline def canDraw(): BOOL = extern
  @inline def needsDisplay(): BOOL = extern
  @inline def setNeedsDisplay(needsDisplay: BOOL): Unit = extern
  @inline def visibleRect(): NSRect = extern
  @inline def tag(): NSInteger = extern
  @inline def needsPanelToBecomeKey(): BOOL = extern
  @inline def mouseDownCanMoveWindow(): BOOL = extern
  @inline def acceptsTouchEvents(): BOOL = extern
  @inline def setAcceptsTouchEvents(acceptsTouchEvents: BOOL): Unit = extern
  @inline def wantsRestingTouches(): BOOL = extern
  @inline def setWantsRestingTouches(wantsRestingTouches: BOOL): Unit = extern
//  @inline def layerContentsRedrawPolicy(): NSViewLayerContentsRedrawPolicy = extern
//  @inline def setLayerContentsRedrawPolicy(layerContentsRedrawPolicy: NSViewLayerContentsRedrawPolicy): Unit = extern
//  @inline def layerContentsPlacement(): NSViewLayerContentsPlacement = extern
//  @inline def setLayerContentsPlacement(layerContentsPlacement: NSViewLayerContentsPlacement): Unit = extern
  @inline def wantsLayer(): BOOL = extern
  @inline def setWantsLayer(wantsLayer: BOOL): Unit = extern
//  @inline def layer(): CALayer = extern
//  @inline def setLayer(layer: CALayer): Unit = extern
  @inline def wantsUpdateLayer(): BOOL = extern
  @inline def canDrawSubviewsIntoLayer(): BOOL = extern
  @inline def setCanDrawSubviewsIntoLayer(canDrawSubviewsIntoLayer: BOOL): Unit = extern
//  @inline def alphaValue(): CGFloat = extern
//  @inline def setAlphaValue(alphaValue: CGFloat): Unit = extern
  @inline def layerUsesCoreImageFilters(): BOOL = extern
  @inline def setLayerUsesCoreImageFilters(layerUsesCoreImageFilters: BOOL): Unit = extern
//  @inline def backgroundFilters(): NSArray[__kindof CIFilter] = extern
//  @inline def setBackgroundFilters(backgroundFilters: NSArray[__kindof CIFilter]): Unit = extern
//  @inline def compositingFilter(): CIFilter = extern
//  @inline def setCompositingFilter(compositingFilter: CIFilter): Unit = extern
//  @inline def contentFilters(): NSArray[__kindof CIFilter] = extern
//  @inline def setContentFilters(contentFilters: NSArray[__kindof CIFilter]): Unit = extern
//  @inline def shadow(): NSShadow = extern
//  @inline def setShadow(shadow: NSShadow): Unit = extern
//  @inline def trackingAreas(): NSArray[NSTrackingArea] = extern
  @inline def postsBoundsChangedNotifications(): BOOL = extern
  @inline def setPostsBoundsChangedNotifications(postsBoundsChangedNotifications: BOOL): Unit = extern
//  @inline def enclosingScrollView(): NSScrollView = extern
  @inline def toolTip(): NSString = extern
  @inline def setToolTip(toolTip: NSString): Unit = extern
  @inline def inLiveResize(): BOOL = extern
  @inline def preservesContentDuringLiveResize(): BOOL = extern
  @inline def rectPreservedDuringLiveResize(): NSRect = extern
//  @inline def inputContext(): NSTextInputContext = extern
//  @inline def userInterfaceLayoutDirection(): NSUserInterfaceLayoutDirection = extern
//  @inline def setUserInterfaceLayoutDirection(userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection): Unit = extern
  @inline def preparedContentRect(): NSRect = extern
  @inline def setPreparedContentRect(preparedContentRect: NSRect): Unit = extern
  @inline def allowsVibrancy(): BOOL = extern
  @inline def setKeyboardFocusRingNeedsDisplayInRect(rect: NSRect): Unit = extern
  @inline def drawFocusRingMask(): Unit = extern
  @inline def noteFocusRingMaskChanged(): Unit = extern
  @inline def nextKeyView(): NSView = extern
  @inline def setNextKeyView(nextKeyView: NSView): Unit = extern
  @inline def previousKeyView(): NSView = extern
  @inline def nextValidKeyView(): NSView = extern
  @inline def previousValidKeyView(): NSView = extern
  @inline def canBecomeKeyView(): BOOL = extern
//  @inline def focusRingType(): NSFocusRingType = extern
//  @inline def setFocusRingType(focusRingType: NSFocusRingType): Unit = extern
  @inline def focusRingMaskBounds(): NSRect = extern
//  @inline def writeEPSInsideRect(rect: NSRect, pasteboard: NSPasteboard): Unit = extern
  @inline def dataWithEPSInsideRect(rect: NSRect): NSData = extern
//  @inline def writePDFInsideRect(rect: NSRect, pasteboard: NSPasteboard): Unit = extern
  @inline def dataWithPDFInsideRect(rect: NSRect): NSData = extern
  @inline def print(sender: id): Unit = extern
//  @inline def knowsPageRange(range: NSRangePointer): BOOL = extern
//  @inline def adjustPageWidthNew(newRight: CGFloat, oldLeft: CGFloat, oldRight: CGFloat, rightLimit: CGFloat): Unit = extern
//  @inline def adjustPageHeightNew(newBottom: CGFloat, oldTop: CGFloat, oldBottom: CGFloat, bottomLimit: CGFloat): Unit = extern
  @inline def rectForPage(page: NSInteger): NSRect = extern
  @inline def locationOfPrintRect(aRect: NSRect): NSPoint = extern
  @inline def drawPageBorderWithSize(borderSize: NSSize): Unit = extern
  @inline def drawSheetBorderWithSize(borderSize: NSSize): Unit = extern
  @inline def beginDocument(): Unit = extern
  @inline def endDocument(): Unit = extern
  @inline def beginPageInRect(aRect: NSRect, location: NSPoint): Unit = extern
  @inline def endPage(): Unit = extern
//  @inline def heightAdjustLimit(): CGFloat = extern
//  @inline def widthAdjustLimit(): CGFloat = extern
//  @inline def pageHeader(): NSAttributedString = extern
//  @inline def pageFooter(): NSAttributedString = extern
  @inline def printJobTitle(): NSString = extern
//  @inline def beginDraggingSessionWithItems(items: NSDraggingItem, event: NSEvent, source: id): NSDraggingSession = extern
  @inline def registerForDraggedTypes(newTypes: NSString): Unit = extern
  @inline def unregisterDraggedTypes(): Unit = extern
  @inline def dragFile(filename: NSString, rect: NSRect, aFlag: BOOL, event: NSEvent): BOOL = extern
  @inline def dragPromisedFilesOfTypes(typeArray: NSString, rect: NSRect, sourceObject: id, aFlag: BOOL, event: NSEvent): BOOL = extern
  @inline def registeredDraggedTypes(): NSArray[NSString] = extern
//  @inline def enterFullScreenMode(screen: NSScreen, options: id): BOOL = extern
  @inline def exitFullScreenModeWithOptions(options: id): Unit = extern
  @inline def isInFullScreenMode(): BOOL = extern
//  @inline def showDefinitionForAttributedString(attrString: NSAttributedString, textBaselineOrigin: NSPoint): Unit = extern
//  @inline def showDefinitionForAttributedString(attrString: NSAttributedString, targetRange: NSRange, options: id, originProvider: NSPoint): Unit = extern
  @inline def isDrawingFindIndicator(): BOOL = extern
//  @inline def addGestureRecognizer(gestureRecognizer: NSGestureRecognizer): Unit = extern
//  @inline def removeGestureRecognizer(gestureRecognizer: NSGestureRecognizer): Unit = extern
//  @inline def gestureRecognizers(): NSArray[__kindof NSGestureRecognizer] = extern
//  @inline def setGestureRecognizers(gestureRecognizers: NSArray[__kindof NSGestureRecognizer]): Unit = extern
//  @inline def dragImage(anImage: NSImage, viewLocation: NSPoint, initialOffset: NSSize, event: NSEvent, pboard: NSPasteboard, sourceObj: id, slideFlag: BOOL): Unit = extern
  @inline def convertPointToBase(aPoint: NSPoint): NSPoint = extern
  @inline def convertPointFromBase(aPoint: NSPoint): NSPoint = extern
  @inline def convertSizeToBase(aSize: NSSize): NSSize = extern
  @inline def convertSizeFromBase(aSize: NSSize): NSSize = extern
  @inline def convertRectToBase(aRect: NSRect): NSRect = extern
  @inline def convertRectFromBase(aRect: NSRect): NSRect = extern
//  @inline def performMnemonic(theString: NSString): BOOL = extern
  @inline def shouldDrawColor(): BOOL = extern
  @inline def gState(): NSInteger = extern
  @inline def allocateGState(): Unit = extern
  @inline def releaseGState(): Unit = extern
  @inline def setUpGState(): Unit = extern
  @inline def renewGState(): Unit = extern
}

@ObjCClass
abstract class NSViewClass extends NSObjectClass {
  @inline def focusView(): NSView = extern
//  @inline def defaultMenu(): NSMenu = extern
  @inline def isCompatibleWithResponsiveScrolling(): BOOL = extern
//  @inline def defaultFocusRingType(): NSFocusRingType = extern
}

object NSView extends NSViewClass {
  override type InstanceType = NSView
}