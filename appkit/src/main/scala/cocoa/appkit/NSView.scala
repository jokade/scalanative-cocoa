// Copyright (c) 2018. Distributed under the MIT License (see included LICENSE file).
package cocoa.appkit

import cocoa.foundation.{BOOL, NSArray, NSComparisonResult, NSData, NSInteger, NSObjectClass, NSPoint, NSRangePointer, NSRect, NSSize, NSString, id}

import scala.language.experimental.macros
import scala.scalanative.native._
import scala.scalanative.native.objc._

@ObjC
class NSView extends NSResponder { //with NSAnimatablePropertyContainer with NSUserInterfaceItemIdentification with NSDraggingDestination with NSAppearanceCustomization with NSAccessibilityElement with NSAccessibility {

  @inline def initWithFrame_(frameRect: NSRect): NSView = extern
  @inline def isDescendantOf_(view: NSView): BOOL = extern
  @inline def ancestorSharedWithView_(view: NSView): NSView = extern
  @inline def getRectsBeingDrawn_count_(rects: NSRect, count: NSInteger): Unit = extern
  @inline def needsToDrawRect_(rect: NSRect): BOOL = extern
  @inline def viewDidHide(): Unit = extern
  @inline def viewDidUnhide(): Unit = extern
  @inline def addSubview_(view: NSView): Unit = extern
//  @inline def addSubview_place_otherView_(view: NSView, place: NSWindowOrderingMode, otherView: NSView): Unit = extern
  @inline def sortSubviewsUsingFunction_context_(compare: NSComparisonResult, context: Ptr[Byte]): Unit = extern
//  @inline def viewWillMoveToWindow_(newWindow: NSWindow): Unit = extern
  @inline def viewDidMoveToWindow(): Unit = extern
  @inline def viewWillMoveToSuperview_(newSuperview: NSView): Unit = extern
  @inline def viewDidMoveToSuperview(): Unit = extern
  @inline def didAddSubview_(subview: NSView): Unit = extern
  @inline def willRemoveSubview_(subview: NSView): Unit = extern
  @inline def removeFromSuperview(): Unit = extern
  @inline def replaceSubview_newView_(oldView: NSView, newView: NSView): Unit = extern
  @inline def removeFromSuperviewWithoutNeedingDisplay(): Unit = extern
  @inline def viewDidChangeBackingProperties(): Unit = extern
  @inline def resizeSubviewsWithOldSize_(oldSize: NSSize): Unit = extern
  @inline def resizeWithOldSuperviewSize_(oldSize: NSSize): Unit = extern
  @inline def setFrameOrigin_(newOrigin: NSPoint): Unit = extern
  @inline def setFrameSize_(newSize: NSSize): Unit = extern
  @inline def setBoundsOrigin_(newOrigin: NSPoint): Unit = extern
  @inline def setBoundsSize_(newSize: NSSize): Unit = extern
  @inline def translateOriginToPoint_(translation: NSPoint): Unit = extern
  @inline def scaleUnitSquareToSize_(newUnitSize: NSSize): Unit = extern
  @inline def rotateByAngle_(angle: CGFloat): Unit = extern
  @inline def convertPoint_view_(point: NSPoint, view: NSView): NSPoint = extern
  @inline def convertSize_view_(size: NSSize, view: NSView): NSSize = extern
  @inline def convertRect_view_(rect: NSRect, view: NSView): NSRect = extern
//  @inline def backingAlignedRect_options_(rect: NSRect, options: NSAlignmentOptions): NSRect = extern
  @inline def centerScanRect_(rect: NSRect): NSRect = extern
  @inline def convertPointToBacking_(point: NSPoint): NSPoint = extern
  @inline def convertPointFromBacking_(point: NSPoint): NSPoint = extern
  @inline def convertSizeToBacking_(size: NSSize): NSSize = extern
  @inline def convertSizeFromBacking_(size: NSSize): NSSize = extern
  @inline def convertRectToBacking_(rect: NSRect): NSRect = extern
  @inline def convertRectFromBacking_(rect: NSRect): NSRect = extern
  @inline def convertPointToLayer_(point: NSPoint): NSPoint = extern
  @inline def convertPointFromLayer_(point: NSPoint): NSPoint = extern
  @inline def convertSizeToLayer_(size: NSSize): NSSize = extern
  @inline def convertSizeFromLayer_(size: NSSize): NSSize = extern
  @inline def convertRectToLayer_(rect: NSRect): NSRect = extern
  @inline def convertRectFromLayer_(rect: NSRect): NSRect = extern
  @inline def setNeedsDisplayInRect_(invalidRect: NSRect): Unit = extern
  @inline def lockFocus(): Unit = extern
  @inline def unlockFocus(): Unit = extern
  @inline def lockFocusIfCanDraw(): BOOL = extern
//  @inline def lockFocusIfCanDrawInContext_(context: NSGraphicsContext): BOOL = extern
  @inline def display(): Unit = extern
  @inline def displayIfNeeded(): Unit = extern
  @inline def displayIfNeededIgnoringOpacity(): Unit = extern
  @inline def displayRect_(rect: NSRect): Unit = extern
  @inline def displayIfNeededInRect_(rect: NSRect): Unit = extern
  @inline def displayRectIgnoringOpacity_(rect: NSRect): Unit = extern
  @inline def displayIfNeededInRectIgnoringOpacity_(rect: NSRect): Unit = extern
  @inline def drawRect_(dirtyRect: NSRect): Unit = extern
//  @inline def displayRectIgnoringOpacity_context_(rect: NSRect, context: NSGraphicsContext): Unit = extern
//  @inline def bitmapImageRepForCachingDisplayInRect_(rect: NSRect): NSBitmapImageRep = extern
//  @inline def cacheDisplayInRect_bitmapImageRep_(rect: NSRect, bitmapImageRep: NSBitmapImageRep): Unit = extern
  @inline def viewWillDraw(): Unit = extern
  @inline def scrollPoint_(point: NSPoint): Unit = extern
  @inline def scrollRectToVisible_(rect: NSRect): BOOL = extern
//  @inline def autoscroll_(event: NSEvent): BOOL = extern
  @inline def adjustScroll_(newVisible: NSRect): NSRect = extern
  @inline def scrollRect_delta_(rect: NSRect, delta: NSSize): Unit = extern
  @inline def translateRectsNeedingDisplayInRect_delta_(clipRect: NSRect, delta: NSSize): Unit = extern
  @inline def hitTest_(point: NSPoint): NSView = extern
  @inline def mouse_rect_(point: NSPoint, rect: NSRect): BOOL = extern
  @inline def viewWithTag_(tag: NSInteger): NSView = extern
//  @inline def performKeyEquivalent_(event: NSEvent): BOOL = extern
//  @inline def acceptsFirstMouse_(event: NSEvent): BOOL = extern
//  @inline def shouldDelayWindowOrderingForEvent_(event: NSEvent): BOOL = extern
//  @inline def addCursorRect_object_(rect: NSRect, `object`: NSCursor): Unit = extern
//  @inline def removeCursorRect_object_(rect: NSRect, `object`: NSCursor): Unit = extern
  @inline def discardCursorRects(): Unit = extern
  @inline def resetCursorRects(): Unit = extern
//  @inline def addTrackingRect_owner_data_flag_(rect: NSRect, owner: id, data: Ptr[Byte], flag: BOOL): NSTrackingRectTag = extern
//  @inline def removeTrackingRect_(tag: NSTrackingRectTag): Unit = extern
//  @inline def makeBackingLayer(): CALayer = extern
  @inline def updateLayer(): Unit = extern
//  @inline def addTrackingArea_(trackingArea: NSTrackingArea): Unit = extern
//  @inline def removeTrackingArea_(trackingArea: NSTrackingArea): Unit = extern
  @inline def updateTrackingAreas(): Unit = extern
//  @inline def menuForEvent_(event: NSEvent): NSMenu = extern
//  @inline def willOpenMenu_event_(menu: NSMenu, event: NSEvent): Unit = extern
//  @inline def didCloseMenu_event_(menu: NSMenu, event: NSEvent): Unit = extern
//  @inline def addToolTipRect_owner_data_(rect: NSRect, owner: id, data: Ptr[Byte]): NSToolTipTag = extern
//  @inline def removeToolTip_(tag: NSToolTipTag): Unit = extern
  @inline def removeAllToolTips(): Unit = extern
  @inline def viewWillStartLiveResize(): Unit = extern
  @inline def viewDidEndLiveResize(): Unit = extern
  @inline def getRectsExposedDuringLiveResize_count_(exposedRects: NSRect, count: NSInteger): Unit = extern
  @inline def rectForSmartMagnificationAtPoint_visibleRect_(location: NSPoint, visibleRect: NSRect): NSRect = extern
  @inline def prepareForReuse(): Unit = extern
  @inline def prepareContentInRect_(rect: NSRect): Unit = extern
//  @inline def window(): NSWindow = extern
  @inline def superview(): NSView = extern
  @inline def subviews(): NSArray[NSView] = extern
//  @inline def setSubviews_(subviews: NSArray[__kindof NSView]): Unit = extern
  @inline def opaqueAncestor(): NSView = extern
  @inline def isHidden(): BOOL = extern
  @inline def setHidden_(hidden: BOOL): Unit = extern
  @inline def isHiddenOrHasHiddenAncestor(): BOOL = extern
  @inline def wantsDefaultClipping(): BOOL = extern
  @inline def postsFrameChangedNotifications(): BOOL = extern
  @inline def setPostsFrameChangedNotifications_(postsFrameChangedNotifications: BOOL): Unit = extern
  @inline def autoresizesSubviews(): BOOL = extern
  @inline def setAutoresizesSubviews_(autoresizesSubviews: BOOL): Unit = extern
  @inline def autoresizingMask(): NSAutoresizingMaskOptions = extern
  @inline def setAutoresizingMask_(autoresizingMask: NSAutoresizingMaskOptions): Unit = extern
  @inline def frame(): NSRect = extern
  @inline def setFrame_(frame: NSRect): Unit = extern
//  @inline def frameRotation(): CGFloat = extern
  @inline def setFrameRotation_(frameRotation: CGFloat): Unit = extern
//  @inline def frameCenterRotation(): CGFloat = extern
  @inline def setFrameCenterRotation_(frameCenterRotation: CGFloat): Unit = extern
//  @inline def boundsRotation(): CGFloat = extern
  @inline def setBoundsRotation_(boundsRotation: CGFloat): Unit = extern
  @inline def bounds(): NSRect = extern
  @inline def setBounds_(bounds: NSRect): Unit = extern
  @inline def isFlipped(): BOOL = extern
  @inline def isRotatedFromBase(): BOOL = extern
  @inline def isRotatedOrScaledFromBase(): BOOL = extern
  @inline def isOpaque(): BOOL = extern
  @inline def canDrawConcurrently(): BOOL = extern
  @inline def setCanDrawConcurrently_(canDrawConcurrently: BOOL): Unit = extern
  @inline def canDraw(): BOOL = extern
  @inline def needsDisplay(): BOOL = extern
  @inline def setNeedsDisplay_(needsDisplay: BOOL): Unit = extern
  @inline def visibleRect(): NSRect = extern
  @inline def tag(): NSInteger = extern
  @inline def needsPanelToBecomeKey(): BOOL = extern
  @inline def mouseDownCanMoveWindow(): BOOL = extern
  @inline def acceptsTouchEvents(): BOOL = extern
  @inline def setAcceptsTouchEvents_(acceptsTouchEvents: BOOL): Unit = extern
  @inline def wantsRestingTouches(): BOOL = extern
  @inline def setWantsRestingTouches_(wantsRestingTouches: BOOL): Unit = extern
  @inline def layerContentsRedrawPolicy(): NSViewLayerContentsRedrawPolicy = extern
  @inline def setLayerContentsRedrawPolicy_(layerContentsRedrawPolicy: NSViewLayerContentsRedrawPolicy): Unit = extern
  @inline def layerContentsPlacement(): NSViewLayerContentsPlacement = extern
  @inline def setLayerContentsPlacement_(layerContentsPlacement: NSViewLayerContentsPlacement): Unit = extern
  @inline def wantsLayer(): BOOL = extern
  @inline def setWantsLayer_(wantsLayer: BOOL): Unit = extern
//  @inline def layer(): CALayer = extern
//  @inline def setLayer_(layer: CALayer): Unit = extern
  @inline def wantsUpdateLayer(): BOOL = extern
  @inline def canDrawSubviewsIntoLayer(): BOOL = extern
  @inline def setCanDrawSubviewsIntoLayer_(canDrawSubviewsIntoLayer: BOOL): Unit = extern
//  @inline def alphaValue(): CGFloat = extern
//  @inline def setAlphaValue_(alphaValue: CGFloat): Unit = extern
  @inline def layerUsesCoreImageFilters(): BOOL = extern
  @inline def setLayerUsesCoreImageFilters_(layerUsesCoreImageFilters: BOOL): Unit = extern
//  @inline def backgroundFilters(): NSArray[__kindof CIFilter] = extern
//  @inline def setBackgroundFilters_(backgroundFilters: NSArray[__kindof CIFilter]): Unit = extern
//  @inline def compositingFilter(): CIFilter = extern
//  @inline def setCompositingFilter_(compositingFilter: CIFilter): Unit = extern
//  @inline def contentFilters(): NSArray[__kindof CIFilter] = extern
//  @inline def setContentFilters_(contentFilters: NSArray[__kindof CIFilter]): Unit = extern
//  @inline def shadow(): NSShadow = extern
//  @inline def setShadow_(shadow: NSShadow): Unit = extern
//  @inline def trackingAreas(): NSArray[NSTrackingArea] = extern
  @inline def postsBoundsChangedNotifications(): BOOL = extern
  @inline def setPostsBoundsChangedNotifications_(postsBoundsChangedNotifications: BOOL): Unit = extern
//  @inline def enclosingScrollView(): NSScrollView = extern
  @inline def toolTip(): NSString = extern
  @inline def setToolTip_(toolTip: NSString): Unit = extern
  @inline def inLiveResize(): BOOL = extern
  @inline def preservesContentDuringLiveResize(): BOOL = extern
  @inline def rectPreservedDuringLiveResize(): NSRect = extern
//  @inline def inputContext(): NSTextInputContext = extern
//  @inline def userInterfaceLayoutDirection(): NSUserInterfaceLayoutDirection = extern
//  @inline def setUserInterfaceLayoutDirection_(userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection): Unit = extern
  @inline def preparedContentRect(): NSRect = extern
  @inline def setPreparedContentRect_(preparedContentRect: NSRect): Unit = extern
  @inline def allowsVibrancy(): BOOL = extern
  @inline def setKeyboardFocusRingNeedsDisplayInRect_(rect: NSRect): Unit = extern
  @inline def drawFocusRingMask(): Unit = extern
  @inline def noteFocusRingMaskChanged(): Unit = extern
  @inline def nextKeyView(): NSView = extern
  @inline def setNextKeyView_(nextKeyView: NSView): Unit = extern
  @inline def previousKeyView(): NSView = extern
  @inline def nextValidKeyView(): NSView = extern
  @inline def previousValidKeyView(): NSView = extern
  @inline def canBecomeKeyView(): BOOL = extern
//  @inline def focusRingType(): NSFocusRingType = extern
//  @inline def setFocusRingType_(focusRingType: NSFocusRingType): Unit = extern
  @inline def focusRingMaskBounds(): NSRect = extern
//  @inline def writeEPSInsideRect_pasteboard_(rect: NSRect, pasteboard: NSPasteboard): Unit = extern
  @inline def dataWithEPSInsideRect_(rect: NSRect): NSData = extern
//  @inline def writePDFInsideRect_pasteboard_(rect: NSRect, pasteboard: NSPasteboard): Unit = extern
  @inline def dataWithPDFInsideRect_(rect: NSRect): NSData = extern
  @inline def print_(sender: id): Unit = extern
  @inline def knowsPageRange_(range: NSRangePointer): BOOL = extern
  @inline def adjustPageWidthNew_oldLeft_oldRight_rightLimit_(newRight: CGFloat, oldLeft: CGFloat, oldRight: CGFloat, rightLimit: CGFloat): Unit = extern
  @inline def adjustPageHeightNew_oldTop_oldBottom_bottomLimit_(newBottom: CGFloat, oldTop: CGFloat, oldBottom: CGFloat, bottomLimit: CGFloat): Unit = extern
  @inline def rectForPage_(page: NSInteger): NSRect = extern
  @inline def locationOfPrintRect_(rect: NSRect): NSPoint = extern
  @inline def drawPageBorderWithSize_(borderSize: NSSize): Unit = extern
  @inline def drawSheetBorderWithSize_(borderSize: NSSize): Unit = extern
  @inline def beginDocument(): Unit = extern
  @inline def endDocument(): Unit = extern
  @inline def beginPageInRect_location_(rect: NSRect, location: NSPoint): Unit = extern
  @inline def endPage(): Unit = extern
////  @inline def heightAdjustLimit(): CGFloat = extern
//  @inline def widthAdjustLimit(): CGFloat = extern
//  @inline def pageHeader(): NSAttributedString = extern
//  @inline def pageFooter(): NSAttributedString = extern
  @inline def printJobTitle(): NSString = extern
//  @inline def beginDraggingSessionWithItems_event_source_(items: NSDraggingItem, event: NSEvent, source: id): NSDraggingSession = extern
//  @inline def registerForDraggedTypes_(newTypes: NSPasteboardType): Unit = extern
  @inline def unregisterDraggedTypes(): Unit = extern
//  @inline def registeredDraggedTypes(): NSArray[NSPasteboardType] = extern
//  @inline def enterFullScreenMode_options_(screen: NSScreen, options: id): BOOL = extern
  @inline def exitFullScreenModeWithOptions_(options: id): Unit = extern
  @inline def isInFullScreenMode(): BOOL = extern
//  @inline def showDefinitionForAttributedString_textBaselineOrigin_(attrString: NSAttributedString, textBaselineOrigin: NSPoint): Unit = extern
//  @inline def showDefinitionForAttributedString_targetRange_options_originProvider_(attrString: NSAttributedString, targetRange: NSRange, options: id, originProvider: NSPoint): Unit = extern
  @inline def isDrawingFindIndicator(): BOOL = extern
//  @inline def addGestureRecognizer_(gestureRecognizer: NSGestureRecognizer): Unit = extern
//  @inline def removeGestureRecognizer_(gestureRecognizer: NSGestureRecognizer): Unit = extern
//  @inline def gestureRecognizers(): NSArray[__kindof NSGestureRecognizer] = extern
//  @inline def setGestureRecognizers_(gestureRecognizers: NSArray[__kindof NSGestureRecognizer]): Unit = extern
//  @inline def allowedTouchTypes(): NSTouchTypeMask = extern
//  @inline def setAllowedTouchTypes_(allowedTouchTypes: NSTouchTypeMask): Unit = extern
//  @inline def dragImage_viewLocation_initialOffset_event_pboard_sourceObj_slideFlag_(image: NSImage, viewLocation: NSPoint, initialOffset: NSSize, event: NSEvent, pboard: NSPasteboard, sourceObj: id, slideFlag: BOOL): Unit = extern
//  @inline def dragFile_rect_flag_event_(filename: NSString, rect: NSRect, flag: BOOL, event: NSEvent): BOOL = extern
//  @inline def dragPromisedFilesOfTypes_rect_sourceObject_flag_event_(typeArray: NSString, rect: NSRect, sourceObject: id, flag: BOOL, event: NSEvent): BOOL = extern
  @inline def convertPointToBase_(point: NSPoint): NSPoint = extern
  @inline def convertPointFromBase_(point: NSPoint): NSPoint = extern
  @inline def convertSizeToBase_(size: NSSize): NSSize = extern
  @inline def convertSizeFromBase_(size: NSSize): NSSize = extern
  @inline def convertRectToBase_(rect: NSRect): NSRect = extern
  @inline def convertRectFromBase_(rect: NSRect): NSRect = extern
  @inline def shouldDrawColor(): BOOL = extern
  @inline def gState(): NSInteger = extern
  @inline def allocateGState(): Unit = extern
  @inline def releaseGState(): Unit = extern
  @inline def setUpGState(): Unit = extern
  @inline def renewGState(): Unit = extern
}

@ObjCClass
abstract class NSViewClass extends NSObjectClass {
  @inline def focusView(): NSView = extern
//  @inline def defaultMenu(): NSMenu = extern
  @inline def isCompatibleWithResponsiveScrolling(): BOOL = extern
//  @inline def defaultFocusRingType(): NSFocusRingType = extern
}

object NSView extends NSViewClass {
  override type InstanceType = NSView
}