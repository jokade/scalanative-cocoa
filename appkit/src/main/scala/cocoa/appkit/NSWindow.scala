// Copyright (c) 2018. Distributed under the MIT License (see included LICENSE file).
package cocoa.appkit

import scalanative.native._
import objc._
import cocoa.foundation.{BOOL, NSArray, NSCoder, NSData, NSDictionary, NSInteger, NSNumber, NSObject, NSObjectClass, NSPoint, NSRect, NSSize, NSString, NSTimeInterval, NSUInteger, NSURL, SEL, id}


@ObjC
class NSWindow extends NSResponder { // with NSAnimatablePropertyContainer with NSUserInterfaceValidations with NSUserInterfaceItemIdentification with NSAppearanceCustomization with NSAccessibilityElement with NSAccessibility {
  @inline def frameRectForContentRect_(contentRect: NSRect): NSRect = extern
  @inline def contentRectForFrameRect_(frameRect: NSRect): NSRect = extern
//  @inline def initWithContentRect_style_backingStoreType_flag_(contentRect: NSRect, style: NSWindowStyleMask, backingStoreType: NSBackingStoreType, flag: BOOL): NSWindow = extern
//  @inline def initWithContentRect_style_backingStoreType_flag_screen_(contentRect: NSRect, style: NSWindowStyleMask, backingStoreType: NSBackingStoreType, flag: BOOL, screen: NSScreen): NSWindow = extern
//  @inline def addTitlebarAccessoryViewController_(childViewController: NSTitlebarAccessoryViewController): Unit = extern
//  @inline def insertTitlebarAccessoryViewController_index_(childViewController: NSTitlebarAccessoryViewController, index: NSInteger): Unit = extern
  @inline def removeTitlebarAccessoryViewControllerAtIndex_(index: NSInteger): Unit = extern
  @inline def setTitleWithRepresentedFilename_(filename: NSString): Unit = extern
//  @inline def fieldEditor_object_(createFlag: BOOL, `object`: id): NSText = extern
  @inline def endEditingFor_(`object`: id): Unit = extern
//  @inline def constrainFrameRect_screen_(frameRect: NSRect, screen: NSScreen): NSRect = extern
  @inline def setFrame_flag_(frameRect: NSRect, flag: BOOL): Unit = extern
  @inline def setContentSize_(size: NSSize): Unit = extern
  @inline def setFrameOrigin_(point: NSPoint): Unit = extern
  @inline def setFrameTopLeftPoint_(point: NSPoint): Unit = extern
  @inline def cascadeTopLeftFromPoint_(topLeftPoint: NSPoint): NSPoint = extern
  @inline def animationResizeTime_(newFrame: NSRect): NSTimeInterval = extern
  @inline def setFrame_displayFlag_animateFlag_(frameRect: NSRect, displayFlag: BOOL, animateFlag: BOOL): Unit = extern
  @inline def disableFlushWindow(): Unit = extern
  @inline def enableFlushWindow(): Unit = extern
  @inline def flushWindow(): Unit = extern
  @inline def flushWindowIfNeeded(): Unit = extern
  @inline def displayIfNeeded(): Unit = extern
  @inline def display(): Unit = extern
  @inline def update(): Unit = extern
  @inline def makeFirstResponder_(responder: NSResponder): BOOL = extern
//  @inline def keyDown_(event: NSEvent): Unit = extern
  @inline def close(): Unit = extern
  @inline def miniaturize_(sender: id): Unit = extern
  @inline def deminiaturize_(sender: id): Unit = extern
  @inline def zoom_(sender: id): Unit = extern
//  @inline def tryToPerform_object_(action: SEL, `object`: id): BOOL = extern
//  @inline def validRequestorForSendType_returnType_(sendType: NSPasteboardType, returnType: NSPasteboardType): id = extern
//  @inline def setContentBorderThickness_edge_(thickness: CGFloat, edge: NSRectEdge): Unit = extern
//  @inline def contentBorderThicknessForEdge_(edge: NSRectEdge): CGFloat = extern
//  @inline def setAutorecalculatesContentBorderThickness_edge_(flag: BOOL, edge: NSRectEdge): Unit = extern
//  @inline def autorecalculatesContentBorderThicknessForEdge_(edge: NSRectEdge): BOOL = extern
  @inline def center(): Unit = extern
  @inline def makeKeyAndOrderFront_(sender: id): Unit = extern
  @inline def orderFront_(sender: id): Unit = extern
  @inline def orderBack_(sender: id): Unit = extern
  @inline def orderOut_(sender: id): Unit = extern
//  @inline def orderWindow_otherWin_(place: NSWindowOrderingMode, otherWin: NSInteger): Unit = extern
  @inline def orderFrontRegardless(): Unit = extern
  @inline def makeKeyWindow(): Unit = extern
  @inline def makeMainWindow(): Unit = extern
  @inline def becomeKeyWindow(): Unit = extern
  @inline def resignKeyWindow(): Unit = extern
  @inline def becomeMainWindow(): Unit = extern
  @inline def resignMainWindow(): Unit = extern
  @inline def convertRectToScreen_(rect: NSRect): NSRect = extern
  @inline def convertRectFromScreen_(rect: NSRect): NSRect = extern
  @inline def convertRectToBacking_(rect: NSRect): NSRect = extern
  @inline def convertRectFromBacking_(rect: NSRect): NSRect = extern
//  @inline def backingAlignedRect_options_(rect: NSRect, options: NSAlignmentOptions): NSRect = extern
  @inline def performClose_(sender: id): Unit = extern
  @inline def performMiniaturize_(sender: id): Unit = extern
  @inline def performZoom_(sender: id): Unit = extern
  @inline def dataWithEPSInsideRect_(rect: NSRect): NSData = extern
  @inline def dataWithPDFInsideRect_(rect: NSRect): NSData = extern
  @inline def print_(sender: id): Unit = extern
  @inline def setDynamicDepthLimit_(flag: BOOL): Unit = extern
  @inline def invalidateShadow(): Unit = extern
  @inline def disableScreenUpdatesUntilFlush(): Unit = extern
  @inline def toggleFullScreen_(sender: id): Unit = extern
  @inline def setFrameFromString_(string: NSString): Unit = extern
//  @inline def saveFrameUsingName_(name: NSWindowFrameAutosaveName): Unit = extern
//  @inline def setFrameUsingName_force_(name: NSWindowFrameAutosaveName, force: BOOL): BOOL = extern
//  @inline def setFrameUsingName_(name: NSWindowFrameAutosaveName): BOOL = extern
//  @inline def setFrameAutosaveName_(name: NSWindowFrameAutosaveName): BOOL = extern
  @inline def beginSheet_handler_(sheetWindow: NSWindow, handler: Ptr[Byte]): Unit = extern
  @inline def beginCriticalSheet_handler_(sheetWindow: NSWindow, handler: Ptr[Byte]): Unit = extern
  @inline def endSheet_(sheetWindow: NSWindow): Unit = extern
//  @inline def endSheet_returnCode_(sheetWindow: NSWindow, returnCode: NSModalResponse): Unit = extern
//  @inline def standardWindowButton_(b: NSWindowButton): NSButton = extern
//  @inline def addChildWindow_place_(childWin: NSWindow, place: NSWindowOrderingMode): Unit = extern
  @inline def removeChildWindow_(childWin: NSWindow): Unit = extern
//  @inline def canRepresentDisplayGamut_(displayGamut: NSDisplayGamut): BOOL = extern
  @inline def performWindowDragWithEvent_(event: NSEvent): Unit = extern
  @inline def selectNextKeyView_(sender: id): Unit = extern
  @inline def selectPreviousKeyView_(sender: id): Unit = extern
  @inline def selectKeyViewFollowingView_(view: NSView): Unit = extern
  @inline def selectKeyViewPrecedingView_(view: NSView): Unit = extern
  @inline def disableKeyEquivalentForDefaultButtonCell(): Unit = extern
  @inline def enableKeyEquivalentForDefaultButtonCell(): Unit = extern
  @inline def recalculateKeyViewLoop(): Unit = extern
  @inline def toggleToolbarShown_(sender: id): Unit = extern
  @inline def runToolbarCustomizationPalette_(sender: id): Unit = extern
  @inline def selectNextTab_(sender: id): Unit = extern
  @inline def selectPreviousTab_(sender: id): Unit = extern
  @inline def moveTabToNewWindow_(sender: id): Unit = extern
  @inline def mergeAllWindows_(sender: id): Unit = extern
  @inline def toggleTabBar_(sender: id): Unit = extern
  @inline def toggleTabOverview_(sender: id): Unit = extern
//  @inline def addTabbedWindow_ordered_(window: NSWindow, ordered: NSWindowOrderingMode): Unit = extern
  @inline def title(): NSString = extern
  @inline def setTitle_(title: NSString): Unit = extern
  @inline def titleVisibility(): NSWindowTitleVisibility = extern
  @inline def setTitleVisibility_(titleVisibility: NSWindowTitleVisibility): Unit = extern
  @inline def titlebarAppearsTransparent(): BOOL = extern
  @inline def setTitlebarAppearsTransparent_(titlebarAppearsTransparent: BOOL): Unit = extern
  @inline def contentLayoutRect(): NSRect = extern
  @inline def contentLayoutGuide(): id = extern
//  @inline def titlebarAccessoryViewControllers(): NSArray[__kindof NSTitlebarAccessoryViewController] = extern
//  @inline def setTitlebarAccessoryViewControllers_(titlebarAccessoryViewControllers: NSArray[__kindof NSTitlebarAccessoryViewController]): Unit = extern
  @inline def representedURL(): NSURL = extern
  @inline def setRepresentedURL_(representedURL: NSURL): Unit = extern
  @inline def representedFilename(): NSString = extern
  @inline def setRepresentedFilename_(representedFilename: NSString): Unit = extern
  @inline def isExcludedFromWindowsMenu(): BOOL = extern
  @inline def setExcludedFromWindowsMenu_(excludedFromWindowsMenu: BOOL): Unit = extern
  @inline def contentView(): NSView = extern
  @inline def setContentView_(contentView: NSView): Unit = extern
  @inline def delegate(): NSWindowDelegate = extern
  @inline def setDelegate_(delegate: NSWindowDelegate): Unit = extern
  @inline def windowNumber(): NSInteger = extern
  @inline def styleMask(): NSWindowStyleMask = extern
  @inline def setStyleMask_(styleMask: NSWindowStyleMask): Unit = extern
  @inline def frame(): NSRect = extern
  @inline def inLiveResize(): BOOL = extern
  @inline def showsResizeIndicator(): BOOL = extern
  @inline def setShowsResizeIndicator_(showsResizeIndicator: BOOL): Unit = extern
  @inline def resizeIncrements(): NSSize = extern
  @inline def setResizeIncrements_(resizeIncrements: NSSize): Unit = extern
  @inline def aspectRatio(): NSSize = extern
  @inline def setAspectRatio_(aspectRatio: NSSize): Unit = extern
  @inline def contentResizeIncrements(): NSSize = extern
  @inline def setContentResizeIncrements_(contentResizeIncrements: NSSize): Unit = extern
  @inline def contentAspectRatio(): NSSize = extern
  @inline def setContentAspectRatio_(contentAspectRatio: NSSize): Unit = extern
  @inline def isFlushWindowDisabled(): BOOL = extern
  @inline def viewsNeedDisplay(): BOOL = extern
  @inline def setViewsNeedDisplay_(viewsNeedDisplay: BOOL): Unit = extern
  @inline def isAutodisplay(): BOOL = extern
  @inline def setAutodisplay_(autodisplay: BOOL): Unit = extern
  @inline def preservesContentDuringLiveResize(): BOOL = extern
  @inline def setPreservesContentDuringLiveResize_(preservesContentDuringLiveResize: BOOL): Unit = extern
  @inline def firstResponder(): NSResponder = extern
  @inline def resizeFlags(): NSEventModifierFlags = extern
  @inline def isReleasedWhenClosed(): BOOL = extern
  @inline def setReleasedWhenClosed_(releasedWhenClosed: BOOL): Unit = extern
  @inline def isZoomed(): BOOL = extern
  @inline def isMiniaturized(): BOOL = extern
//  @inline def backgroundColor(): NSColor = extern
//  @inline def setBackgroundColor_(backgroundColor: NSColor): Unit = extern
  @inline def isMovable(): BOOL = extern
  @inline def setMovable_(movable: BOOL): Unit = extern
  @inline def isMovableByWindowBackground(): BOOL = extern
  @inline def setMovableByWindowBackground_(movableByWindowBackground: BOOL): Unit = extern
  @inline def hidesOnDeactivate(): BOOL = extern
  @inline def setHidesOnDeactivate_(hidesOnDeactivate: BOOL): Unit = extern
  @inline def canHide(): BOOL = extern
  @inline def setCanHide_(canHide: BOOL): Unit = extern
//  @inline def miniwindowImage(): NSImage = extern
//  @inline def setMiniwindowImage_(miniwindowImage: NSImage): Unit = extern
  @inline def miniwindowTitle(): NSString = extern
  @inline def setMiniwindowTitle_(miniwindowTitle: NSString): Unit = extern
//  @inline def dockTile(): NSDockTile = extern
  @inline def isDocumentEdited(): BOOL = extern
  @inline def setDocumentEdited_(documentEdited: BOOL): Unit = extern
  @inline def isVisible(): BOOL = extern
  @inline def isKeyWindow(): BOOL = extern
  @inline def isMainWindow(): BOOL = extern
  @inline def canBecomeKeyWindow(): BOOL = extern
  @inline def canBecomeMainWindow(): BOOL = extern
  @inline def worksWhenModal(): BOOL = extern
  @inline def preventsApplicationTerminationWhenModal(): BOOL = extern
  @inline def setPreventsApplicationTerminationWhenModal_(preventsApplicationTerminationWhenModal: BOOL): Unit = extern
  @inline def backingScaleFactor(): CGFloat = extern
  @inline def isOneShot(): BOOL = extern
  @inline def setOneShot_(oneShot: BOOL): Unit = extern
  @inline def allowsToolTipsWhenApplicationIsInactive(): BOOL = extern
  @inline def setAllowsToolTipsWhenApplicationIsInactive_(allowsToolTipsWhenApplicationIsInactive: BOOL): Unit = extern
//  @inline def backingType(): NSBackingStoreType = extern
//  @inline def setBackingType_(backingType: NSBackingStoreType): Unit = extern
//  @inline def level(): NSWindowLevel = extern
//  @inline def setLevel_(level: NSWindowLevel): Unit = extern
//  @inline def depthLimit(): NSWindowDepth = extern
//  @inline def setDepthLimit_(depthLimit: NSWindowDepth): Unit = extern
  @inline def hasDynamicDepthLimit(): BOOL = extern
//  @inline def screen(): NSScreen = extern
//  @inline def deepestScreen(): NSScreen = extern
  @inline def hasShadow(): BOOL = extern
  @inline def setHasShadow_(hasShadow: BOOL): Unit = extern
  @inline def alphaValue(): CGFloat = extern
  @inline def setAlphaValue_(alphaValue: CGFloat): Unit = extern
  @inline def isOpaque(): BOOL = extern
  @inline def setOpaque_(opaque: BOOL): Unit = extern
  @inline def sharingType(): NSWindowSharingType = extern
  @inline def setSharingType_(sharingType: NSWindowSharingType): Unit = extern
  @inline def preferredBackingLocation(): NSWindowBackingLocation = extern
  @inline def setPreferredBackingLocation_(preferredBackingLocation: NSWindowBackingLocation): Unit = extern
  @inline def backingLocation(): NSWindowBackingLocation = extern
  @inline def allowsConcurrentViewDrawing(): BOOL = extern
  @inline def setAllowsConcurrentViewDrawing_(allowsConcurrentViewDrawing: BOOL): Unit = extern
  @inline def displaysWhenScreenProfileChanges(): BOOL = extern
  @inline def setDisplaysWhenScreenProfileChanges_(displaysWhenScreenProfileChanges: BOOL): Unit = extern
  @inline def canBecomeVisibleWithoutLogin(): BOOL = extern
  @inline def setCanBecomeVisibleWithoutLogin_(canBecomeVisibleWithoutLogin: BOOL): Unit = extern
  @inline def collectionBehavior(): NSWindowCollectionBehavior = extern
  @inline def setCollectionBehavior_(collectionBehavior: NSWindowCollectionBehavior): Unit = extern
  @inline def animationBehavior(): NSWindowAnimationBehavior = extern
  @inline def setAnimationBehavior_(animationBehavior: NSWindowAnimationBehavior): Unit = extern
  @inline def isOnActiveSpace(): BOOL = extern
  @inline def stringWithSavedFrame(): NSString = extern
//  @inline def frameAutosaveName(): NSWindowFrameAutosaveName = extern
  @inline def minSize(): NSSize = extern
  @inline def setMinSize_(minSize: NSSize): Unit = extern
  @inline def maxSize(): NSSize = extern
  @inline def setMaxSize_(maxSize: NSSize): Unit = extern
  @inline def contentMinSize(): NSSize = extern
  @inline def setContentMinSize_(contentMinSize: NSSize): Unit = extern
  @inline def contentMaxSize(): NSSize = extern
  @inline def setContentMaxSize_(contentMaxSize: NSSize): Unit = extern
  @inline def minFullScreenContentSize(): NSSize = extern
  @inline def setMinFullScreenContentSize_(minFullScreenContentSize: NSSize): Unit = extern
  @inline def maxFullScreenContentSize(): NSSize = extern
  @inline def setMaxFullScreenContentSize_(maxFullScreenContentSize: NSSize): Unit = extern
//  @inline def deviceDescription(): NSDictionary[NSDeviceDescriptionKey, id] = extern
//  @inline def windowController(): NSWindowController = extern
//  @inline def setWindowController_(windowController: NSWindowController): Unit = extern
  @inline def sheets(): NSArray[NSWindow] = extern
  @inline def attachedSheet(): NSWindow = extern
  @inline def isSheet(): BOOL = extern
  @inline def sheetParent(): NSWindow = extern
  @inline def childWindows(): NSArray[NSWindow] = extern
  @inline def parentWindow(): NSWindow = extern
  @inline def setParentWindow_(parentWindow: NSWindow): Unit = extern
//  @inline def graphicsContext(): NSGraphicsContext = extern
//  @inline def colorSpace(): NSColorSpace = extern
//  @inline def setColorSpace_(colorSpace: NSColorSpace): Unit = extern
//  @inline def occlusionState(): NSWindowOcclusionState = extern
//  @inline def contentViewController(): NSViewController = extern
//  @inline def setContentViewController_(contentViewController: NSViewController): Unit = extern
  @inline def initialFirstResponder(): NSView = extern
  @inline def setInitialFirstResponder_(initialFirstResponder: NSView): Unit = extern
  @inline def keyViewSelectionDirection(): NSSelectionDirection = extern
//  @inline def defaultButtonCell(): NSButtonCell = extern
//  @inline def setDefaultButtonCell_(defaultButtonCell: NSButtonCell): Unit = extern
  @inline def autorecalculatesKeyViewLoop(): BOOL = extern
  @inline def setAutorecalculatesKeyViewLoop_(autorecalculatesKeyViewLoop: BOOL): Unit = extern
//  @inline def toolbar(): NSToolbar = extern
//  @inline def setToolbar_(toolbar: NSToolbar): Unit = extern
  @inline def showsToolbarButton(): BOOL = extern
  @inline def setShowsToolbarButton_(showsToolbarButton: BOOL): Unit = extern
  @inline def tabbingMode(): NSWindowTabbingMode = extern
  @inline def setTabbingMode_(tabbingMode: NSWindowTabbingMode): Unit = extern
//  @inline def tabbingIdentifier(): NSWindowTabbingIdentifier = extern
//  @inline def setTabbingIdentifier_(tabbingIdentifier: NSWindowTabbingIdentifier): Unit = extern
  @inline def tabbedWindows(): NSArray[NSWindow] = extern
//  @inline def tab(): NSWindowTab = extern
//  @inline def tabGroup(): NSWindowTabGroup = extern
//  @inline def windowTitlebarLayoutDirection(): NSUserInterfaceLayoutDirection = extern
//  @inline def trackEventsMatchingMask_timeout_mode_trackingHandler_(mask: NSEventMask, timeout: NSTimeInterval, mode: NSRunLoopMode, trackingHandler: Ptr[Byte]): Unit = extern
  @inline def nextEventMatchingMask_(mask: NSEventMask): NSEvent = extern
//  @inline def nextEventMatchingMask_expiration_mode_deqFlag_(mask: NSEventMask, expiration: NSDate, mode: NSRunLoopMode, deqFlag: BOOL): NSEvent = extern
  @inline def discardEventsMatchingMask_lastEvent_(mask: NSEventMask, lastEvent: NSEvent): Unit = extern
  @inline def postEvent_flag_(event: NSEvent, flag: BOOL): Unit = extern
  @inline def sendEvent_(event: NSEvent): Unit = extern
  @inline def currentEvent(): NSEvent = extern
  @inline def acceptsMouseMovedEvents(): BOOL = extern
  @inline def setAcceptsMouseMovedEvents_(acceptsMouseMovedEvents: BOOL): Unit = extern
  @inline def ignoresMouseEvents(): BOOL = extern
  @inline def setIgnoresMouseEvents_(ignoresMouseEvents: BOOL): Unit = extern
  @inline def mouseLocationOutsideOfEventStream(): NSPoint = extern
  @inline def disableCursorRects(): Unit = extern
  @inline def enableCursorRects(): Unit = extern
  @inline def discardCursorRects(): Unit = extern
  @inline def invalidateCursorRectsForView_(view: NSView): Unit = extern
  @inline def resetCursorRects(): Unit = extern
  @inline def areCursorRectsEnabled(): BOOL = extern
//  @inline def dragImage_baseLocation_initialOffset_event_pboard_sourceObj_slideFlag_(image: NSImage, baseLocation: NSPoint, initialOffset: NSSize, event: NSEvent, pboard: NSPasteboard, sourceObj: id, slideFlag: BOOL): Unit = extern
//  @inline def registerForDraggedTypes_(newTypes: NSPasteboardType): Unit = extern
  @inline def unregisterDraggedTypes(): Unit = extern
  @inline def initWithWindowRef_(windowRef: Ptr[Byte]): NSWindow = extern
  @inline def windowRef(): Ptr[Byte] = extern
  @inline def cacheImageInRect_(rect: NSRect): Unit = extern
  @inline def restoreCachedImage(): Unit = extern
  @inline def discardCachedImage(): Unit = extern
  @inline def gState(): NSInteger = extern
  @inline def convertBaseToScreen_(point: NSPoint): NSPoint = extern
  @inline def convertScreenToBase_(point: NSPoint): NSPoint = extern
  @inline def userSpaceScaleFactor(): CGFloat = extern
  @inline def useOptimizedDrawing_(flag: BOOL): Unit = extern
  @inline def canStoreColor(): BOOL = extern
}


@ObjCClass
abstract class NSWindowClass extends NSObjectClass {
  @inline def frameRectForContentRect_style_(cRect: NSRect, style: NSWindowStyleMask): NSRect = extern
  @inline def contentRectForFrameRect_style_(fRect: NSRect, style: NSWindowStyleMask): NSRect = extern
  @inline def minFrameWidthWithTitle_style_(title: NSString, style: NSWindowStyleMask): CGFloat = extern
//  @inline def removeFrameUsingName_(name: NSWindowFrameAutosaveName): Unit = extern
//  @inline def standardWindowButton_styleMask_(b: NSWindowButton, styleMask: NSWindowStyleMask): NSButton = extern
  @inline def windowNumbersWithOptions_(options: NSWindowNumberListOptions): NSArray[NSNumber] = extern
  @inline def windowNumberAtPoint_windowNumber_(point: NSPoint, windowNumber: NSInteger): NSInteger = extern
//  @inline def windowWithContentViewController_(contentViewController: NSViewController): NSWindow = extern
//  @inline def defaultDepthLimit(): NSWindowDepth = extern
  @inline def allowsAutomaticWindowTabbing(): BOOL = extern
  @inline def setAllowsAutomaticWindowTabbing_(allowsAutomaticWindowTabbing: BOOL): Unit = extern
  @inline def userTabbingPreference(): NSWindowUserTabbingPreference = extern
//  @inline def menuChanged_(menu: NSMenu): Unit = extern
}

object NSWindow extends NSWindowClass {
  override type InstanceType = NSWindow
}